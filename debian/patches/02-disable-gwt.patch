Description: Disables GWT support
Author: Emmanuel Bourg <ebourg@apache.org>
Forwarded: not-needed
--- a/core/src/main/java/com/google/common/truth/ClassSubject.java
+++ b/core/src/main/java/com/google/common/truth/ClassSubject.java
@@ -15,7 +15,6 @@
  */
 package com.google.common.truth;
 
-import com.google.common.annotations.GwtIncompatible;
 import javax.annotation.Nullable;
 
 /**
@@ -23,7 +22,6 @@
  *
  * @author Kurt Alfred Kluever
  */
-@GwtIncompatible("reflection")
 public final class ClassSubject extends Subject<ClassSubject, Class<?>> {
   ClassSubject(FailureMetadata metadata, @Nullable Class<?> o) {
     super(metadata, o);
--- a/core/src/main/java/com/google/common/truth/Expect.java
+++ b/core/src/main/java/com/google/common/truth/Expect.java
@@ -22,7 +22,6 @@
 import static com.google.common.truth.Expect.TestPhase.BEFORE;
 import static com.google.common.truth.Expect.TestPhase.DURING;
 
-import com.google.common.annotations.GwtIncompatible;
 import com.google.common.truth.Truth.AssertionErrorWithCause;
 import com.google.errorprone.annotations.concurrent.GuardedBy;
 import java.util.ArrayList;
@@ -62,7 +61,6 @@
  * <p>To record failures for the purpose of testing that an assertion fails when it should, see
  * {@link ExpectFailure}.
  */
-@GwtIncompatible("JUnit4")
 public final class Expect extends StandardSubjectBuilder implements TestRule {
 
   private static final class ExpectationGatherer implements FailureStrategy {
--- a/core/src/main/java/com/google/common/truth/StringSubject.java
+++ b/core/src/main/java/com/google/common/truth/StringSubject.java
@@ -18,7 +18,6 @@
 import static com.google.common.base.Preconditions.checkArgument;
 import static com.google.common.base.Preconditions.checkNotNull;
 
-import com.google.common.annotations.GwtIncompatible;
 import java.util.regex.Pattern;
 import javax.annotation.Nullable;
 
@@ -167,7 +166,6 @@
   }
 
   /** Fails if the string does not match the given regex. */
-  @GwtIncompatible("java.util.regex.Pattern")
   public void matches(Pattern regex) {
     if (!regex.matcher(actual()).matches()) {
       fail("matches", regex);
@@ -182,7 +180,6 @@
   }
 
   /** Fails if the string matches the given regex. */
-  @GwtIncompatible("java.util.regex.Pattern")
   public void doesNotMatch(Pattern regex) {
     if (regex.matcher(actual()).matches()) {
       fail("fails to match", regex);
@@ -190,7 +187,6 @@
   }
 
   /** Fails if the string does not contain a match on the given regex. */
-  @GwtIncompatible("java.util.regex.Pattern")
   public void containsMatch(Pattern pattern) {
     if (!pattern.matcher(actual()).find()) {
       failWithRawMessage("%s should have contained a match for <%s>", actualAsString(), pattern);
@@ -205,7 +201,6 @@
   }
 
   /** Fails if the string contains a match on the given regex. */
-  @GwtIncompatible("java.util.regex.Pattern")
   public void doesNotContainMatch(Pattern pattern) {
     if (pattern.matcher(actual()).find()) {
       failWithRawMessage(
--- a/core/src/main/java/com/google/common/truth/TruthJUnit.java
+++ b/core/src/main/java/com/google/common/truth/TruthJUnit.java
@@ -15,7 +15,6 @@
  */
 package com.google.common.truth;
 
-import com.google.common.annotations.GwtIncompatible;
 import org.junit.internal.AssumptionViolatedException;
 
 /**
@@ -40,7 +39,6 @@
  * @author David Saff
  * @author Christian Gruber (cgruber@israfil.net)
  */
-@GwtIncompatible("JUnit4")
 public final class TruthJUnit {
   private static final FailureStrategy THROW_ASSUMPTION_ERROR =
       new FailureStrategy() {
